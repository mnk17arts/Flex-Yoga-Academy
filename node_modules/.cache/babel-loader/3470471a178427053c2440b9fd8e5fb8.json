{"ast":null,"code":"import * as Yup from 'yup';\nexport const getInitialValues = (defaultValues, initialValues) => {\n  if (!initialValues) return defaultValues;\n  return { ...defaultValues,\n    ...initialValues\n  };\n};\nexport const getDefaultValues = schema => {\n  return schema.filter(val => !val.condition).reduce((acc, val) => {\n    let defaultValue;\n\n    switch (val.componentType) {\n      case 'text':\n      case 'textarea':\n      case 'select':\n      case 'radioGroup':\n        defaultValue = '';\n        break;\n\n      case 'checkbox':\n        defaultValue = false;\n        break;\n\n      default:\n        defaultValue = '';\n    }\n\n    return { ...acc,\n      [val.name]: val.defaultValue || defaultValue\n    };\n  }, {});\n};\nexport const getValidationSchema = schema => {\n  const validationObject = schema.reduce((acc, val) => {\n    let validationType;\n\n    switch (val.componentType) {\n      case 'text':\n      case 'textarea':\n      case 'select':\n      case 'radioGroup':\n        validationType = Yup.string();\n        break;\n\n      case 'checkbox':\n      default:\n        validationType = null;\n    }\n\n    if (val.required && validationType) {\n      validationType = validationType.required(`${val.label} is required`);\n    }\n\n    return { ...acc,\n      ...(validationType && {\n        [val.name]: validationType\n      })\n    };\n  }, {});\n  return Yup.object().shape(validationObject);\n};","map":{"version":3,"sources":["C:/Users/Dell/OneDrive/Desktop/Preparation/Projects/Flex-Yoga-Academy/src/components/forms/helpers.js"],"names":["Yup","getInitialValues","defaultValues","initialValues","getDefaultValues","schema","filter","val","condition","reduce","acc","defaultValue","componentType","name","getValidationSchema","validationObject","validationType","string","required","label","object","shape"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,aAAD,EAAgBC,aAAhB,KAAkC;AAChE,MAAI,CAACA,aAAL,EAAoB,OAAOD,aAAP;AAEpB,SAAO,EAAE,GAAGA,aAAL;AAAoB,OAAGC;AAAvB,GAAP;AACD,CAJM;AAMP,OAAO,MAAMC,gBAAgB,GAAIC,MAAD,IAAY;AAC1C,SAAOA,MAAM,CACVC,MADI,CACIC,GAAD,IAAS,CAACA,GAAG,CAACC,SADjB,EAEJC,MAFI,CAEG,CAACC,GAAD,EAAMH,GAAN,KAAc;AACpB,QAAII,YAAJ;;AACA,YAAQJ,GAAG,CAACK,aAAZ;AACE,WAAK,MAAL;AACA,WAAK,UAAL;AACA,WAAK,QAAL;AACA,WAAK,YAAL;AACED,QAAAA,YAAY,GAAG,EAAf;AACA;;AACF,WAAK,UAAL;AACEA,QAAAA,YAAY,GAAG,KAAf;AACA;;AACF;AACEA,QAAAA,YAAY,GAAG,EAAf;AAXJ;;AAcA,WAAO,EACL,GAAGD,GADE;AAEL,OAACH,GAAG,CAACM,IAAL,GAAYN,GAAG,CAACI,YAAJ,IAAoBA;AAF3B,KAAP;AAID,GAtBI,EAsBF,EAtBE,CAAP;AAuBD,CAxBM;AA0BP,OAAO,MAAMG,mBAAmB,GAAIT,MAAD,IAAY;AAC7C,QAAMU,gBAAgB,GAAGV,MAAM,CAACI,MAAP,CAAc,CAACC,GAAD,EAAMH,GAAN,KAAc;AACnD,QAAIS,cAAJ;;AAEA,YAAQT,GAAG,CAACK,aAAZ;AACE,WAAK,MAAL;AACA,WAAK,UAAL;AACA,WAAK,QAAL;AACA,WAAK,YAAL;AACEI,QAAAA,cAAc,GAAGhB,GAAG,CAACiB,MAAJ,EAAjB;AACA;;AACF,WAAK,UAAL;AACA;AACED,QAAAA,cAAc,GAAG,IAAjB;AATJ;;AAYA,QAAIT,GAAG,CAACW,QAAJ,IAAgBF,cAApB,EAAoC;AAClCA,MAAAA,cAAc,GAAGA,cAAc,CAACE,QAAf,CAAyB,GAAEX,GAAG,CAACY,KAAM,cAArC,CAAjB;AACD;;AAED,WAAO,EAAE,GAAGT,GAAL;AAAU,UAAIM,cAAc,IAAI;AAAE,SAACT,GAAG,CAACM,IAAL,GAAYG;AAAd,OAAtB;AAAV,KAAP;AACD,GApBwB,EAoBtB,EApBsB,CAAzB;AAsBA,SAAOhB,GAAG,CAACoB,MAAJ,GAAaC,KAAb,CAAmBN,gBAAnB,CAAP;AACD,CAxBM","sourcesContent":["import * as Yup from 'yup'\r\n\r\nexport const getInitialValues = (defaultValues, initialValues) => {\r\n  if (!initialValues) return defaultValues\r\n\r\n  return { ...defaultValues, ...initialValues }\r\n}\r\n\r\nexport const getDefaultValues = (schema) => {\r\n  return schema\r\n    .filter((val) => !val.condition)\r\n    .reduce((acc, val) => {\r\n      let defaultValue\r\n      switch (val.componentType) {\r\n        case 'text':\r\n        case 'textarea':\r\n        case 'select':\r\n        case 'radioGroup':\r\n          defaultValue = ''\r\n          break\r\n        case 'checkbox':\r\n          defaultValue = false\r\n          break\r\n        default:\r\n          defaultValue = ''\r\n      }\r\n\r\n      return {\r\n        ...acc,\r\n        [val.name]: val.defaultValue || defaultValue,\r\n      }\r\n    }, {})\r\n}\r\n\r\nexport const getValidationSchema = (schema) => {\r\n  const validationObject = schema.reduce((acc, val) => {\r\n    let validationType\r\n\r\n    switch (val.componentType) {\r\n      case 'text':\r\n      case 'textarea':\r\n      case 'select':\r\n      case 'radioGroup':\r\n        validationType = Yup.string()\r\n        break\r\n      case 'checkbox':\r\n      default:\r\n        validationType = null\r\n    }\r\n\r\n    if (val.required && validationType) {\r\n      validationType = validationType.required(`${val.label} is required`)\r\n    }\r\n\r\n    return { ...acc, ...(validationType && { [val.name]: validationType }) }\r\n  }, {})\r\n\r\n  return Yup.object().shape(validationObject)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}