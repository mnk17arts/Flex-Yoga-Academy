{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\Preparation\\\\Projects\\\\Flex-Yoga-Academy\\\\src\\\\components\\\\forms\\\\YogaForm.js\";\nimport React from 'react';\nimport { Formik, Field } from 'formik';\nimport { Btn, Select, TextField, RadioGroup, ConditionalField } from '.';\nimport { getInitialValues, getDefaultValues, getValidationSchema } from './helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst components = [{\n  componentType: 'text',\n  component: TextField\n}, {\n  componentType: 'select',\n  component: Select\n}, {\n  componentType: 'radioGroup',\n  component: RadioGroup\n}, {\n  componentType: 'btn',\n  component: Btn\n}];\nexport const YogaForm = _ref => {\n  let {\n    schema,\n    onSubmit,\n    initialValues,\n    onClose,\n    buttonLabel = 'Submit',\n    ...props\n  } = _ref;\n  const defaultValues = getDefaultValues(schema);\n  const validationSchema = getValidationSchema(schema);\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: getInitialValues(defaultValues, initialValues),\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n    validateOnMount: true,\n    ...props,\n    children: _ref2 => {\n      let {\n        handleSubmit,\n        isSubmitting,\n        isValid,\n        setFieldValue,\n        setFieldTouched,\n        values\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"advanced-form\",\n        children: [schema.map(_ref3 => {\n          let {\n            componentType,\n            condition,\n            ...formSchema\n          } = _ref3;\n\n          if (!components.some(component => component.componentType === componentType)) {\n            return null;\n          }\n\n          const Component = components.find(component => component.componentType === componentType).component;\n\n          if (condition) {\n            return /*#__PURE__*/_jsxDEV(ConditionalField, {\n              show: condition.operator === '=' ? values[condition.key] === condition.value : values[condition.key] !== condition.value,\n              onCollapse: () => {\n                setFieldValue(formSchema.name, defaultValues[formSchema.name]);\n                setFieldTouched(formSchema.name, false);\n              },\n              onShow: () => {\n                setFieldValue(formSchema.name, defaultValues[formSchema.name]);\n              },\n              children: /*#__PURE__*/_jsxDEV(Field, {\n                component: Component,\n                ...formSchema\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 21\n              }, this)\n            }, formSchema.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 19\n            }, this);\n          }\n\n          return /*#__PURE__*/_jsxDEV(Field, {\n            component: Component,\n            ...formSchema\n          }, formSchema.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: !isValid || isSubmitting,\n          children: buttonLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_c = YogaForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"YogaForm\");","map":{"version":3,"sources":["C:/Users/Dell/OneDrive/Desktop/Preparation/Projects/Flex-Yoga-Academy/src/components/forms/YogaForm.js"],"names":["React","Formik","Field","Btn","Select","TextField","RadioGroup","ConditionalField","getInitialValues","getDefaultValues","getValidationSchema","components","componentType","component","YogaForm","schema","onSubmit","initialValues","onClose","buttonLabel","props","defaultValues","validationSchema","handleSubmit","isSubmitting","isValid","setFieldValue","setFieldTouched","values","map","condition","formSchema","some","Component","find","operator","key","value","name"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Formik, Field } from 'formik'\r\n\r\nimport {\r\n  Btn,\r\n  Select,\r\n  TextField,\r\n  RadioGroup,\r\n  ConditionalField,\r\n\r\n} from '.'\r\nimport {\r\n  getInitialValues,\r\n  getDefaultValues,\r\n  getValidationSchema,\r\n} from './helpers'\r\n\r\nconst components = [\r\n  { componentType: 'text', component: TextField },\r\n  { componentType: 'select', component: Select },\r\n  { componentType: 'radioGroup', component: RadioGroup },\r\n  { componentType: 'btn', component: Btn },\r\n]\r\n\r\nexport const YogaForm = ({\r\n  schema,\r\n  onSubmit,\r\n  initialValues,\r\n  onClose,\r\n  buttonLabel = 'Submit',\r\n  ...props\r\n}) => {\r\n  const defaultValues = getDefaultValues(schema)\r\n  const validationSchema = getValidationSchema(schema)\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={getInitialValues(defaultValues, initialValues)}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmit}\r\n      validateOnMount\r\n      {...props}\r\n    >\r\n      {({\r\n        handleSubmit,\r\n        isSubmitting,\r\n        isValid,\r\n        setFieldValue,\r\n        setFieldTouched,\r\n        values,\r\n      }) => {\r\n        return (\r\n          <form onSubmit={handleSubmit} className=\"advanced-form\">\r\n            {schema.map(({ componentType, condition, ...formSchema }) => {\r\n              if (\r\n                !components.some(\r\n                  (component) => component.componentType === componentType,\r\n                )\r\n              ) {\r\n                return null\r\n              }\r\n\r\n              const Component = components.find(\r\n                (component) => component.componentType === componentType,\r\n              ).component\r\n\r\n              if (condition) {\r\n                return (\r\n                  <ConditionalField\r\n                    key={formSchema.name}\r\n                    show={\r\n                      condition.operator === '='\r\n                        ? values[condition.key] === condition.value\r\n                        : values[condition.key] !== condition.value\r\n                    }\r\n                    onCollapse={() => {\r\n                      setFieldValue(\r\n                        formSchema.name,\r\n                        defaultValues[formSchema.name],\r\n                      )\r\n                      setFieldTouched(formSchema.name, false)\r\n                    }}\r\n                    onShow={() => {\r\n                      setFieldValue(\r\n                        formSchema.name,\r\n                        defaultValues[formSchema.name],\r\n                      )\r\n                    }}\r\n                  >\r\n                    <Field component={Component} {...formSchema} />\r\n                  </ConditionalField>\r\n                )\r\n              }\r\n\r\n              return (\r\n                <Field\r\n                  key={formSchema.name}\r\n                  component={Component}\r\n                  {...formSchema}\r\n                />\r\n              )\r\n            })}\r\n            <button type=\"submit\" disabled={!isValid || isSubmitting}>\r\n              {buttonLabel}\r\n            </button>\r\n          </form>\r\n        )\r\n      }}\r\n    </Formik>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}